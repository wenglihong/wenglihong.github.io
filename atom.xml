<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wengge987</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-26T01:53:46.636Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wenglihong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/26/hello-world/"/>
    <id>http://yoursite.com/2016/08/26/hello-world/</id>
    <published>2016-08-26T01:53:46.636Z</published>
    <updated>2016-08-26T01:53:46.636Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ROS学习（二）——ROS文件系统</title>
    <link href="http://yoursite.com/2016/08/26/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2016/08/26/ROS学习（二）——文件系统/</id>
    <published>2016-08-25T16:00:00.000Z</published>
    <updated>2016-08-26T03:12:04.360Z</updated>
    
    <content type="html"><![CDATA[<p>学习ROS的文件系统，要了解几个重要的概念，主要包括<br>1.工作空间（workspace）<br>2.程序包（package）<br>3.节点（node）</p>
<p>1.工作空间</p>
<p>在ROS入门教程中，在开始所有的编程工作之前，首先是要创建一个catkin_ws，即catkin工作空间，需要创建这样一个工作空间的原因与这个catkin工具有关。<br>    Catkin is a collection of CMake macros and associated code used to build packages used in ROS.<a href="http://docs.ros.org/api/catkin/html/" target="_blank" rel="external">参考网页</a><br>    就是说，catkin是一些cmake宏的集合，以及用于编译ros程序包的相关代码，简单理解它就是一个编译程序的工具，具体实现上可以参看ros安装目录下的catkin_make的python脚本，实际上catkin_make的工作就是确认各种编译需要的文件的存在性以及路径，解析程序包之间的依赖关系等等，简单了解即可。<br>    正是由于ros编译程序采用了catkin_make工具，因此我们需要将创建的程序包放在catkin工作空间中，这样就简化了编译程序的工作，省去了编写编译文件中的许多工作量。<br>更多关于catkin工作空间的资料，可以参考<br><a href="http://wiki.ros.org/cn/ROS/Tutorials/CreatingPackage" target="_blank" rel="external">http://wiki.ros.org/cn/ROS/Tutorials/CreatingPackage</a><br><a href="http://docs.ros.org/api/catkin/html/" target="_blank" rel="external">http://docs.ros.org/api/catkin/html/</a><br>/opt/ros/indigo/bin/catkin_make</p>
<p>2.程序包</p>
<p>程序包的概念比较容易理解，可以将它视为一个解决方案，我们可以将同类功能的程序都放在一个程序包中，比如添加一个新的传感器驱动，我们就可以将它作为一个程序包。在ros中，创建一个程序包非常简单，在工作空间的src文件夹中新建一个文件夹，在该文件夹下添加src文件夹，include文件夹，一个CmakeList.txt文件以及package.xml文件。文件树的结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        -- WORKSPACE</div><div class="line">  src/                   -- SOURCE SPACE</div><div class="line">    CMakeLists.txt       -- &apos;Toplevel&apos; CMake file, provided by catkin</div><div class="line">    package_1/</div><div class="line">	  src/</div><div class="line">	  include/</div><div class="line">      CMakeLists.txt     -- CMakeLists.txt file for package_1</div><div class="line">      package.xml        -- Package manifest for package_1</div><div class="line">    ...</div><div class="line">    package_n/</div><div class="line">	  src/</div><div class="line">	  include/</div><div class="line">      CMakeLists.txt     -- CMakeLists.txt file for package_n</div><div class="line">      package.xml        -- Package manifest for package_n</div></pre></td></tr></table></figure>
<p>需要注意的是，每个package文件夹下只能有一个描述文件，也只能生产一个程序包，但是可以将多个程序包放在一个元程序包的文件夹下。举个例子，一个机器人可能配置了许多传感器，每个传感器的驱动都是一个程序包，而所有传感器的程序包可以放在一个我们命名位drivers的元程序包中，用文件树描述如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        </div><div class="line">  src/                   </div><div class="line">    CMakeLists.txt       </div><div class="line">	drivers/</div><div class="line">	  driver_1/</div><div class="line">	    src/</div><div class="line">	    include/</div><div class="line">        CMakeLists.txt    </div><div class="line">        package.xml        </div><div class="line">    ...</div><div class="line">      driver_n/</div><div class="line">	    src/</div><div class="line">	    include/</div><div class="line">        CMakeLists.txt     </div><div class="line">        package.xml</div></pre></td></tr></table></figure>
<p>这样组织文件带来的好处是使文件系统看起来更加简洁，可以将几个大类的功能分别放在相应的元程序包中，而不会使各种程序包放在一起显得杂乱无章。例如，一个机器人系统的软件系统包含驱动，感知，规划，显示等几个部分，我们就可以这样来组织文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">workspace_folder/        </div><div class="line">  src/                   </div><div class="line">    CMakeLists.txt       </div><div class="line">	drivers/</div><div class="line">	perception/</div><div class="line">	planning/</div><div class="line">	visualization/</div></pre></td></tr></table></figure>
<p>关于package.xml文件和CmakeList.txt文件的具体内容和编写方式，放到下篇文章中详细描述。</p>
<p>3.节点</p>
<p>一个节点其实只不过是ROS程序包中的一个可执行文件。ROS节点可以使用topic与其他节点通信。节点可以发布或接收一个话题。节点也可以提供或使用某种服务。<br>我们最主要的工作就是要编写节点程序，这里就回到了我们熟悉的编写程序的部分，要编写源文件，头文件，在程序中定义节点的输入输出接口，执行算法，实现逻辑判断等等。编写完节点程序，要让该节点程序成为一个可执行文件，需要在CmakeList.txt添加相应的命令，这个等下篇细讲。</p>
<p>总结一下，本文主要介绍了ros文件系统的组织形式，包括工作空间，程序包和节点，工作空间的创建可以说是一劳永逸，主要目的就是为了使用catkin工具，程序包就是一个解决方案，每次新建时都要用描述文件来配置，节点是一个可执行文件，CmakeList.txt用来对程序包和节点进行编译。<br>另外，ros wiki上关于文件系统的介绍多是关于文件系统指令的使用，rospack , roscd , rosls等，可以了解一下<br><a href="http://wiki.ros.org/cn/ROS/Tutorials/NavigatingTheFilesystem" target="_blank" rel="external">http://wiki.ros.org/cn/ROS/Tutorials/NavigatingTheFilesystem</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习ROS的文件系统，要了解几个重要的概念，主要包括&lt;br&gt;1.工作空间（workspace）&lt;br&gt;2.程序包（package）&lt;br&gt;3.节点（node）&lt;/p&gt;
&lt;p&gt;1.工作空间&lt;/p&gt;
&lt;p&gt;在ROS入门教程中，在开始所有的编程工作之前，首先是要创建一个catki
    
    </summary>
    
      <category term="ROS学习" scheme="http://yoursite.com/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ROS" scheme="http://yoursite.com/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS学习（四）ROS消息传递——std_msgs</title>
    <link href="http://yoursite.com/2016/08/26/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89ROS%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E2%80%94%E2%80%94std_msgs/"/>
    <id>http://yoursite.com/2016/08/26/ROS学习（四）ROS消息传递——std_msgs/</id>
    <published>2016-08-25T16:00:00.000Z</published>
    <updated>2016-08-26T03:21:18.272Z</updated>
    
    <content type="html"><![CDATA[<p>ROS中，节点之间通过发布话题和订阅话题来通信，在程序中是通过消息发布器和订阅器来实现，数据流通过话题的发布和订阅在节点之间传播，而数据流的数据类型则称为消息，例如ros入门教程中的节点talker和listener之间通过话题”chatter”来传递数据流，而数据流的具体数据类型则是std_msgs/String。参见<a href="http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29" target="_blank" rel="external">http://wiki.ros.org/cn/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29</a><br>教程中只介绍了std_msgs/String消息的发布和接收，但我们经常还需要传递其他类型比如整形，字符型等数据，这些类型的如何传递呢？实际上std_msgs中已经包含了所有的基本数据类型，我们可以rosmsg指令对我们不了解的数据类型进行详细的考察。<br>打开一个新终端，键入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosmsg -h</div></pre></td></tr></table></figure>
<p>可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rosmsg is a command-line tool for displaying information about ROS Message types.</div><div class="line"></div><div class="line">Commands:</div><div class="line">	rosmsg show	Show message description</div><div class="line">	rosmsg list	List all messages</div><div class="line">	rosmsg md5	Display message md5sum</div><div class="line">	rosmsg package	List messages in a package</div><div class="line">	rosmsg packages	List packages that contain messages</div><div class="line"></div><div class="line">Type rosmsg &lt;command&gt; -h for more detailed usage</div></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosmsg list</div></pre></td></tr></table></figure>
<p>ros会输出工作空间中已经存在的所有类型消息，我们在其中可以找到std_msg包含的所有消息类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">std_msgs/Bool</div><div class="line">std_msgs/Byte</div><div class="line">std_msgs/ByteMultiArray</div><div class="line">std_msgs/Char</div><div class="line">std_msgs/ColorRGBA</div><div class="line">std_msgs/Duration</div><div class="line">std_msgs/Empty</div><div class="line">std_msgs/Float32</div><div class="line">std_msgs/Float32MultiArray</div><div class="line">std_msgs/Float64</div><div class="line">std_msgs/Float64MultiArray</div><div class="line">std_msgs/Header</div><div class="line">std_msgs/Int16</div><div class="line">std_msgs/Int16MultiArray</div><div class="line">std_msgs/Int32</div><div class="line">std_msgs/Int32MultiArray</div><div class="line">std_msgs/Int64</div><div class="line">std_msgs/Int64MultiArray</div><div class="line">std_msgs/Int8</div><div class="line">std_msgs/Int8MultiArray</div><div class="line">std_msgs/MultiArrayDimension</div><div class="line">std_msgs/MultiArrayLayout</div><div class="line">std_msgs/String</div><div class="line">std_msgs/Time</div><div class="line">std_msgs/UInt16</div><div class="line">std_msgs/UInt16MultiArray</div><div class="line">std_msgs/UInt32</div><div class="line">std_msgs/UInt32MultiArray</div><div class="line">std_msgs/UInt64</div><div class="line">std_msgs/UInt64MultiArray</div><div class="line">std_msgs/UInt8</div><div class="line">std_msgs/UInt8MultiArray</div></pre></td></tr></table></figure></p>
<p>再用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosmsg show std_msgs/Int8</div></pre></td></tr></table></figure></p>
<p>可已看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int8 data</div></pre></td></tr></table></figure>
<p>也就是说，std_msgs/Int8实际上是由一个int8 类型的对象data组成，知道这些信息，我们就能够正确的构造消息发布器和订阅了<br>要发布一个消息，正确的做法应该是<br>1.包含相应的头文件<br>2.定义节点句柄和发布器，要指明发布的数据类型，话题和缓存队列大小<br>3.定义一个相应数据类型的对象并给其成员赋值<br>4.发布消息<br>参考下面代码片段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &quot;std_msgs/String.h&quot;</div><div class="line">...</div><div class="line"></div><div class="line">ros::NodeHandle nh;</div><div class="line">ros::Publisher pub_int8 = nh.advertise&lt;std_msgs::Int8&gt;(&quot;int8&quot;, 10);</div><div class="line">std_msgs::Int8 msg;</div><div class="line">msg.data = 1;</div><div class="line">pub_int8.publish(msg);</div></pre></td></tr></table></figure></p>
<p>接收程序类似，也有几点需要注意<br>1.包含相应的头文件<br>2.定义节点句柄和订阅器，要指明订阅器订阅的话题，缓存队列大小和回调函数名<br>3.编写回调函数，回调函数的形参数据类型一定要对应正确的数据类型<br>4.进入循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#include &quot;ros/ros.h&quot;</div><div class="line">#include &quot;std_msgs/Int8.h&quot;</div><div class="line"></div><div class="line">void int8Callback(const std_msgs::Int8::ConstPtr&amp; msg)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">//这里也可以不用指针接收，则对发布的消息进行拷贝，如</div><div class="line">//void int8Callback(const std_msgs::Int8 msg)</div><div class="line"></div><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">  ros::init(argc, argv, &quot;int8_sub&quot;);</div><div class="line">  ros::NodeHandle nh;</div><div class="line">  ros::Subscriber sub_int8 = nh.subscribe(&quot;int8&quot;, 10, int8Callback);</div><div class="line">  ros::spin();</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，std_msg下还包含了基本数据类型的向量，我们也可以很方便地传递向量，不过除了上面包含的步骤外，向量的赋值要格外注意，应该使用pushback()函数来填充数据。例如一个double类型向量，应该这样发布<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">std_msgs::Float64MultiArray val;</div><div class="line"></div><div class="line">val.data.push_back(1.0);</div><div class="line">val.data.push_back(2.0);</div><div class="line">val.data.push_back(3.0);</div><div class="line">val.data.push_back(4.0);</div><div class="line">val.data.push_back(5.0);</div><div class="line">val.data.push_back(6.0);</div><div class="line"></div><div class="line">pub_double.publish(val);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ROS中，节点之间通过发布话题和订阅话题来通信，在程序中是通过消息发布器和订阅器来实现，数据流通过话题的发布和订阅在节点之间传播，而数据流的数据类型则称为消息，例如ros入门教程中的节点talker和listener之间通过话题”chatter”来传递数据流，而数据流的具体
    
    </summary>
    
      <category term="ROS学习" scheme="http://yoursite.com/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ROS" scheme="http://yoursite.com/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS学习（三）——package.xml和CmakeList.txt文件的编写</title>
    <link href="http://yoursite.com/2016/08/26/ROS%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94package.xml%E5%92%8CCmakeList.txt%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E5%86%99/"/>
    <id>http://yoursite.com/2016/08/26/ROS学习（三）——package.xml和CmakeList.txt文件的编写/</id>
    <published>2016-08-25T16:00:00.000Z</published>
    <updated>2016-08-26T03:16:52.052Z</updated>
    
    <content type="html"><![CDATA[<p>package.xml和CmakeList.txt文件是生成程序包和节点的重要配置文件，在开始编写我们的程序之前，对这两个文件的编写需要有一定的了解。</p>
<p><strong>1.package.xml。</strong><br>package.xml实际上是一个程序包的描述文件，以下参考ros百科入门教程中的一个xml文件来解读。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">&lt;package&gt;</div><div class="line">  &lt;name&gt;beginner_tutorials&lt;/name&gt;</div><div class="line">  &lt;version&gt;0.1.0&lt;/version&gt;</div><div class="line">  &lt;description&gt;The beginner_tutorials package&lt;/description&gt;</div><div class="line"></div><div class="line">  &lt;maintainer email=&quot;you@yourdomain.tld&quot;&gt;Your Name&lt;/maintainer&gt;</div><div class="line">  &lt;license&gt;BSD&lt;/license&gt;</div><div class="line">  &lt;url type=&quot;website&quot;&gt;http://wiki.ros.org/beginner_tutorials&lt;/url&gt;</div><div class="line">  &lt;author email=&quot;you@yourdomain.tld&quot;&gt;Jane Doe&lt;/author&gt;</div><div class="line"></div><div class="line">  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt;</div><div class="line"></div><div class="line">  &lt;build_depend&gt;roscpp&lt;/build_depend&gt;</div><div class="line">  &lt;build_depend&gt;rospy&lt;/build_depend&gt;</div><div class="line">  &lt;build_depend&gt;std_msgs&lt;/build_depend&gt;</div><div class="line"></div><div class="line">  &lt;run_depend&gt;roscpp&lt;/run_depend&gt;</div><div class="line">  &lt;run_depend&gt;rospy&lt;/run_depend&gt;</div><div class="line">  &lt;run_depend&gt;std_msgs&lt;/run_depend&gt;</div><div class="line"></div><div class="line">&lt;/package&gt;</div></pre></td></tr></table></figure>
<p>在描述文件中，有几个重要的参数需要注意，出错将导致编译无法通过，一个是name，决定了编译出的程序包的名称，另外是build_depend和run_depend，它们指明了程序包编译和运行的依赖项，通常是所用到的库文件的名称。这三个参数需要根据自己的需要修改，其他的参数更多的是程序维护这的信息。<br>实际上，上面的xml文件是一种旧的书写格式，现在ros支持新的书写格式，与第一中格式的差别不大，并且ros对两种xml文件格式都是兼容的，新格式的xml文件可以参照下面的写法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;package format=&quot;2&quot;&gt;</div><div class="line">  &lt;name&gt;node_example&lt;/name&gt;</div><div class="line">  &lt;version&gt;0.0.1&lt;/version&gt;</div><div class="line">  &lt;description&gt;</div><div class="line">    Example.</div><div class="line">  &lt;/description&gt;</div><div class="line">  &lt;author&gt;Thomas Denewiler&lt;/author&gt;</div><div class="line">  &lt;maintainer email=&quot;tdenewiler@gmail.com&quot;&gt;Thomas Denewiler&lt;/maintainer&gt;</div><div class="line">  &lt;license&gt;BSD&lt;/license&gt;</div><div class="line">  &lt;url&gt;https://github.com/tdenewiler/node_example&lt;/url&gt;</div><div class="line"></div><div class="line">  &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt;</div><div class="line">  &lt;build_depend&gt;message_generation&lt;/build_depend&gt;</div><div class="line"></div><div class="line">  &lt;depend&gt;roscpp&lt;/depend&gt;</div><div class="line">  &lt;depend&gt;rospy&lt;/depend&gt;</div><div class="line">  &lt;depend&gt;std_msgs&lt;/depend&gt;</div><div class="line">&lt;/package&gt;</div></pre></td></tr></table></figure>
<p>可以看到，新版本相对旧版本的区别主要在于不区分build_depend和run_depend，更多的关于两种package.xml描述文件以及它们的区别，可以参考下面的网页<br><a href="http://wiki.ros.org/catkin/package.xml" target="_blank" rel="external">http://wiki.ros.org/catkin/package.xml</a><br><a href="http://wiki.ros.org/cn/ROS/Tutorials/CreatingPackage" target="_blank" rel="external">http://wiki.ros.org/cn/ROS/Tutorials/CreatingPackage</a></p>
<p><strong>2.CmakeList.txt</strong><br>下面来研究一下CmakeList.txt文件的编写方式，先预览一下一个完整的需要包括的内容<br>cmake_minimum_required()<br>要求的CMake最低版本<br>project()<br>程序包的名称<br>find_package()<br>编译依赖的程序包<br>add_message_files(), add_service_files(), add_action_files()<br>添加消息、服务或响应文件<br>generate_messages()<br>生成消息、服务或响应文件<br>catkin_package()<br>catkin程序包<br>add_library()/add_executable()/target_link_libraries()<br>添加库文件，可执行文件，链接库文件<br>catkin_add_gtest()<br>添加测试单元<br>install()<br>安装</p>
<p>前两个参数都很好理解，不再赘述。</p>
<p>find_package()作用是指定编译工程需要的其他程序包，这个函数的参数至少要包括catkin REQUIRED，我们来看一个典型的find_package()包含的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find_package(catkin REQUIRED COMPONENTS 	</div><div class="line">			 roscpp </div><div class="line">			 std_msgs</div><div class="line">			 message_generation </div><div class="line">		  	 sensor_msgs</div><div class="line">)</div></pre></td></tr></table></figure>
<p>catkin_package()是catkin提供的CMake宏，对生成的pkg和CMake文件进行配置，如果去掉编译也能通过，但是配置会发生变化，比如生成的可执行文件会在工作空间中的build文件夹中而不是devel/lib文件夹中，这样可能导致的一个后果是无法使用rosrun指令来运行可执行文件。</p>
<p>add_message_files()和generate_messages()是在使用用户自定义消息时需要添加，这部分可以在学习添加自定义消息时再深入学习。</p>
<p>add_executable()<br>指定要编译的可执行文件，例如<br>add_executable(myNode src/main.cpp src/file1.cpp src/file2.cpp)<br>上面的语句将调用src/main.cpp，src/file1.cpp和src/file2.cpp生成名为myNode的目标可执行文件，生成的可执行文件就是我们说的节点。</p>
<p>add_library()<br>生成库文件</p>
<p>target_link_libraries()<br>指定所生成的可执行文件所链接的库文件，通常写在add_executable()之后。一般来说，要生成一个ros节点，必须添加catkin_LIBRARIES，例如<br>target_link_libraries(myNode  ${catkin_LIBRARIES})</p>
<p>install()<br>install()是一个可选项，通常在程序编译完后，目标可执行文件被放在工作空间的devel文件夹中，但通常我们希望把目标放在系统中，这样程序包就可以作为被其他人使用，作为其他程序的依赖项。具体做法可以参考ros wiki <a href="http://wiki.ros.org/catkin/CMakeLists.txt" target="_blank" rel="external">http://wiki.ros.org/catkin/CMakeLists.txt</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;package.xml和CmakeList.txt文件是生成程序包和节点的重要配置文件，在开始编写我们的程序之前，对这两个文件的编写需要有一定的了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.package.xml。&lt;/strong&gt;&lt;br&gt;package.xml实际上是一个程序
    
    </summary>
    
      <category term="ROS学习" scheme="http://yoursite.com/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ROS" scheme="http://yoursite.com/tags/ROS/"/>
    
  </entry>
  
</feed>
